function [volumeAlphaBM, volumeAlphaRet]=analyzeVolume(varargin)

% Copyright (C) 2022, RÃ©my Dumas, Santiago Costantino 
% Hopital Maisonneuve-Rosemont, 
% Centre de Recherche
% www.biophotonics.ca
%
% This program is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with this program.  If not, see <http://www.gnu.org/licenses/>.

% This function analyzes Hypotony Maculopathy from OCT images. Input is the 
% folder where images (tiff or png, only) are located and the x and y scales of the OCT machine used. 

% Detailed explanations of the algorithm and use are available in an article 
% published in the Journal of Glaucoma, 
% "Quantification of hypotony maculopathy using spectral-domain optical coherence tomography" by R. Dumas et al.



imagePaths=varargin{1};
if nargin==2
    scaleX=varargin{2}(1);
    scaleY=varargin{2}(2);
else
    scaleX = 5.7;
    scaleY = 3.9;
end

volumePropsTab = [];

% Load results generated by `analyzeBscans`
volumeDir = fullfile(imagePaths(1).folder, 'Visualization');
destDir = volumeDir;
load(fullfile(destDir, 'regionProps_Ret.mat'));
load(fullfile(destDir, 'regionProps_BM.mat'));

% Get crop information
if isfile(fullfile(imagePaths(1).folder, 'ROI.mat'))
    load(fullfile(imagePaths(1).folder, 'ROI.mat'));
else
    ROI=[1, 1, size(imageOne, 2)-1, size(imageOne, 1)-1];
end
xmin = ROI(1);
xmax = ROI(1) + ROI(3);
ymin = ROI(2);
ymax = ROI(2) + ROI(4);

% Get the number of scans per volumes
% ids_scans = sort(unique([wholeTable_bm.id_scan;wholeTable_ret.id_scan]));
N_scans = size(imagePaths, 1);

% Meta data
volumeProps.folder = imagePaths(1);
volumeProps.xcrop1 = xmin;
volumeProps.xcrop2 = xmax;
volumeProps.width = ROI(3)*scaleX;

%% BM metric
for bScan=1:N_scans
    idRows=find(strcmp(wholeTable_bm.file, fullfile(imagePaths(bScan).folder, imagePaths(bScan).name)));
    bScanAlphaBM(bScan)=sum(wholeTable_bm.area(idRows).*wholeTable_bm.sharpness(idRows)/volumeProps.width);
    bScanAlphaRet(bScan)=sum(wholeTable_ret.area(idRows).*wholeTable_ret.sharpness(idRows)/volumeProps.width);
end
volumeAlphaBM=sum(bScanAlphaBM)/N_scans;
volumeAlphaRet=sum(bScanAlphaRet)/N_scans;


save(fullfile(destDir, 'vomumeData.mat'), 'volumeAlphaRet', "volumeAlphaBM")
